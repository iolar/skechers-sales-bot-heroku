import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
import json
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timezone, timedelta
import locale

headers = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0'
}
locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")
cur_time = datetime.now(timezone(timedelta(hours=7))).strftime('%a %#d %b %Y %#H:%M')


def fetch_data():
    url = f'https://www.sportmaster.ru/catalog/brendy/skechers/muzhskaya_obuv/?f-ra=size_44,size_45&f-promotion:globalpromo=true'
    response = requests.get(url=url, headers=headers)
    soup = BeautifulSoup(response.text, 'lxml')
    shoes_items = soup.find('div', class_="sm-product-grid--size-xs") \
        .find_all('div', class_='sm-product-card__info')

    data = [{
        'datetime': cur_time
    }]
    for shoes_item in shoes_items:
        shoes_title = shoes_item.find('div', class_="sm-text-text-14").find('a').text.strip()
        shoes_url = 'https://www.sportmaster.ru' + \
                    shoes_item.find('div', class_="sm-text-text-14").find('a').get('href')
        shoes_new_price = int(shoes_item.find('span', class_="sm-amount_default") \
                              .find('span').find('span').text.replace('¬†', '').replace('‚ÇΩ', ''))
        shoes_old_price = int(shoes_item.find('span', class_="sm-amount_old") \
                              .find('span').find('span').text.replace('¬†', '').replace('‚ÇΩ', ''))
        shoes_discount = round(((shoes_old_price - shoes_new_price) / shoes_old_price) * 100)

        try:
            shoes_reviews = shoes_item.find('div', class_="feedback__rating-wrapper")\
                .find('span').text.strip()
        except:
            shoes_reviews = '–Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤'

        if shoes_title.startswith('–ö—Ä–æ—Å—Å–æ–≤–∫–∏'):
            shoes_category = '–ö—Ä–æ—Å—Å–æ–≤–∫–∏'
        elif shoes_title.startswith('–ë–æ—Ç–∏–Ω–∫–∏'):
            shoes_category = '–ë–æ—Ç–∏–Ω–∫–∏'
        elif shoes_title.startswith('–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏'):
            shoes_category = '–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏'
        elif shoes_title.startswith('–°–ª–∏–ø–æ–Ω—ã'):
            shoes_category = '–°–ª–∏–ø–æ–Ω—ã'
        elif shoes_title.startswith('–ö–µ–¥—ã'):
            shoes_category = '–ö–µ–¥—ã'
        elif shoes_title.startswith('–°–∞–Ω–¥–∞–ª–∏–∏'):
            shoes_category = '–°–∞–Ω–¥–∞–ª–∏–∏'
        else:
            shoes_category = '–î—Ä—É–≥–æ–µ'

        data.append(
            {
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": shoes_category,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": shoes_title,
                "–°—Å—ã–ª–∫–∞":  shoes_url,
                "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π": shoes_new_price,
                "–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞": shoes_old_price,
                "–°–∫–∏–¥–∫–∞": shoes_discount,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤": shoes_reviews
            }
        )
        with open('result.json', 'w') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)


TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = os.getenv('PORT', default=8000)


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


async def show_data(message: types.Message, shoes_type):
    await message.answer('–û–¥–Ω—É —Å–µ–∫—É–Ω–¥–æ—á–∫—É... ')

    with open('result.json') as file:
        data = json.load(file)

    shoes_category = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == shoes_type]

    if len(shoes_category) != 0:
        for index, item in enumerate(shoes_category):
            card = f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞'))}\n" \
                   f"{hbold('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ')} {(item.get('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞'))}\n" \
                   f"{hbold('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π ')}{hbold(item.get('–°–∫–∏–¥–∫–∞'))}% :  {(item.get('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π'))} üî•\n" \
                   f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')} {(item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'))}"

            await message.answer(card)

            if index % 20 == 0:
                time.sleep(3)

    else:
        await message.answer('–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üòï')

    await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ —Å —Å–∞–π—Ç–∞: {hbold(data[0].get("datetime"))}')


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ["–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–ë–æ—Ç–∏–Ω–∫–∏", "–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏",
                     "–°–ª–∏–ø–æ–Ω—ã", "–ö–µ–¥—ã", "–°–∞–Ω–¥–∞–ª–∏–∏"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å –±—Ä—ç–Ω–¥–∞ Skechers —Ä–∞–∑–º–µ—Ä–∞ 44-45 —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –°–ø–æ—Ä—Ç–º–∞—Å—Ç–µ—Ä',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals=("–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–ë–æ—Ç–∏–Ω–∫–∏", "–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏",
                                 "–°–ª–∏–ø–æ–Ω—ã", "–ö–µ–¥—ã", "–°–∞–Ω–¥–∞–ª–∏–∏")))
async def get_discounts(message: types.Message):
    await show_data(message, message.text)


@dp.message_handler()
async def get_discounts(message: types.Message):
    await message.answer("–ù–µ –Ω–∞–¥–æ –º–Ω–µ –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å, —è - –≥–ª—É–ø—ã–π –±–æ—Ç, –∏ —É–º–µ—é —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ–±—É–≤—å üòî\n"
                         "–õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –æ–±—É–≤–∏ üòâ")


def main():
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )


if __name__ == '__main__':
    main()
