import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from main import collect_data
import json

TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = os.getenv('PORT', default=8000)


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


async def show_data(shoes_category, message: types.Message):
    if len(shoes_category) != 0:
        for item in shoes_category:
            card = f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞'))}\n" \
                f"{hbold('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ')} {(item.get('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞'))}\n" \
                f"{hbold('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π -')}{hbold(item.get('–°–∫–∏–¥–∫–∞'))}:  {(item.get('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π'))} üî•\n" \
                f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')} {(item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'))}"

            await message.answer(card)

    else:
        await message.answer('–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üòï')


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ["–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–ë–æ—Ç–∏–Ω–∫–∏", "–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏",
                     "–°–ª–∏–ø–æ–Ω—ã", "–ö–µ–¥—ã", "–ö–ª–æ–≥–∏", "–î—Ä—É–≥–æ–µ"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ Skechers',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals='–ö—Ä–æ—Å—Å–æ–≤–∫–∏'))
async def get_discounts_running_shoes(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    running_shoes = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–ö—Ä–æ—Å—Å–æ–≤–∫–∏"]

    await show_data(running_shoes, message)


@dp.message_handler(Text(equals='–ë–æ—Ç–∏–Ω–∫–∏'))
async def get_discounts_boots(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    boots = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–ë–æ—Ç–∏–Ω–∫–∏"]

    await show_data(boots, message)


@dp.message_handler(Text(equals='–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏'))
async def get_discounts_low_shoes(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    low_shoes = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–ü–æ–ª—É–±–æ—Ç–∏–Ω–∫–∏"]

    await show_data(low_shoes, message)


@dp.message_handler(Text(equals='–°–ª–∏–ø–æ–Ω—ã'))
async def get_discounts_slipOns(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    slipOns = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–°–ª–∏–ø–æ–Ω—ã"]

    await show_data(slipOns, message)


@dp.message_handler(Text(equals='–ö–µ–¥—ã'))
async def get_discounts_sneakers(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    sneakers = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–ö–µ–¥—ã"]

    await show_data(sneakers, message)


@dp.message_handler(Text(equals='–ö–ª–æ–≥–∏'))
async def get_discounts_clogs(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    clogs = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–ö–ª–æ–≥–∏"]

    await show_data(clogs, message)


@dp.message_handler(Text(equals='–î—Ä—É–≥–æ–µ'))
async def get_discounts_other(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞...')

    collect_data()

    with open('result.json') as file:
        data = json.load(file)

    other = [x for x in data if x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == "–î—Ä—É–≥–æ–µ"]

    await show_data(other, message)


def main():
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )


if __name__ == '__main__':
    main()
